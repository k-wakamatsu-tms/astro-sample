{
  "ルール": {
    "コミットメッセージガイドライン": {
      "説明": "コンベンショナルコミットメッセージを作成するためのガイドライン。",
      "形式": {
        "説明": "コンベンショナルコミット仕様に従ったコミットメッセージの形式。",
        "本文": "[オプションのスコープ]: \n\n[オプションの本文]\n\n[オプションのフッター]"
      },
      "有効": true,
      "ルール": [
        {
          "説明": "常に小文字でタイプとオプションのスコープを含むコンベンショナルコミットを提案すること。"
        },
        {
          "説明": "コミットメッセージは簡潔にし、60文字以内に収めること。"
        },
        {
          "説明": "コミットメッセージはそのままターミナルに貼り付けて使えるようにすること。"
        },
        {
          "説明": "メッセージだけでなく、コミットするための完全なコマンドを提供すること。"
        }
      ],
      "例": [
        {
          "プロンプト": "<diff_context> /commit",
          "レスポンス": "git commit -m 'feat: add responsive navbar with TailwindCSS'"
        }
      ]
    },
    "開発ガイドライン": {
      "説明": "Astro、TypeScript、TailwindCSSを使用してコードを開発するためのガイドライン。",
      "有効": true,
      "ルール": [
        {
          "説明": "厳格なTypeScript設定を適用し、プロジェクト全体で型の安全性を確保すること。"
        },
        {
          "説明": "すべてのスタイリングにTailwindCSSを使用し、ユーティリティファーストのアプローチを念頭に置くこと。"
        },
        {
          "説明": "Astroコンポーネントはモジュール化され、再利用可能であり、関心の分離を明確に保つこと。"
        },
        {
          "説明": ".astroファイル内の<style>タグでAstroのスコープスタイリングを使用する。"
        },
        {
          "説明": "spec.yamlファイルを参照して、プロジェクトの仕様を遵守すること。"
        }
      ]
    },
    "コーディングスタイル": {
      "説明": "一貫性のあるコーディングスタイルを維持するためのガイドライン。",
      "有効": true,
      "ルール": [
        {
          "説明": "コードは`path/filename`で始まる1行コメントから開始すること。"
        },
        {
          "説明": "コメントは効果ではなく目的を説明すること。"
        },
        {
          "説明": "モジュール性、DRY原則、パフォーマンスを優先すること。"
        }
      ]
    },
    "カスタムスラッシュコマンド": {
      "説明": "カスタムスラッシュコマンド。",
      "有効": true,
      "コマンド": [
        {
          "名前": "/commit",
          "説明": "コンベンショナルコミット仕様を使用してGitコミットメッセージを生成します。",
          "有効": true
        }
      ]
    }
  }
}
